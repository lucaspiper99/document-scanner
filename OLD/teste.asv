%pivproject2021(1,  "DATASETS\InitialDataset\templates\template2_fewArucos.png" ,"output" ,"input", 0)
%function pivproject2021(task,  reference_path ,path_to_output_folder , path_to_input_folder, arg2)
        %reads reference template
        
        clear all;
        
        [OLDreference,map] = imread("DATASETS\InitialDataset\templates\template2_fewArucos.png");
        if size(OLDreference,3) == 1
            OLDreference = uint8(round(ind2rgb(OLDreference, map)*255));
        end
        a= 20;
        reference = uint8(zeros(size(OLDreference,1)+a*2,size(OLDreference,2)+a*2,3));
        reference((1+a):(size(OLDreference,1)+a),(1+a):(size(OLDreference,2)+a),:) = OLDreference;
        reference(1:a,:,1) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,2));
        reference(1:a,:,2) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,2));
        reference(1:a,:,3) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,2));
        reference((size(reference,1)-a+1):size(reference,1),:,1) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,2));
        reference((size(reference,1)-a+1):size(reference,1),:,2) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,2));
        reference((size(reference,1)-a+1):size(reference,1),:,3) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,2));
        reference(a:size(reference,1)-a,1:a,1) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,1)-2*a)';
        reference(a:size(reference,1)-a,1:a,2) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,1))';
        reference(a:size(reference,1)-a,1:a,3) = repelem( [0:(255/a):(255-255/a)]' ,1, size(reference,1))';
        reference(a:size(reference,1)-a,(size(reference,2)-a+1):size(reference,2),1) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,1))';
        reference(a:size(reference,1)-a,(size(reference,2)-a+1):size(reference,2),2) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,1))';
        reference(a:size(reference,1)-a,(size(reference,2)-a+1):size(reference,2),3) = repelem( [flip(0:(255/a):(255-255/a))]' ,1, size(reference,1))';
        imshow(reference);
        [refCornersCoords, template_ids]  = getCorners(reference);
        ref_h = size(reference,1);
        ref_w = size(reference,2);
        vectorMatrix = [repelem(1:ref_w,ref_h); repmat(1:ref_h,[1,ref_w]);...
                    ones(1,ref_h*ref_w)];
        reference=rgb2gray(reference);
        reference=im2double(reference);
        REF = detectSURFFeatures(reference);
        [f1,vpts1] = extractFeatures(reference,REF);
        ref_h = size(reference,1);
        ref_w = size(reference,2);
        vectorMatrix = [repelem(1:ref_w,ref_h); repmat(1:ref_h,[1,ref_w]);...
                    ones(1,ref_h*ref_w)];

        files = dir(fullfile("input"));
        for i = 1:length(files)                         %reads every file in the input folder
            if files(i).isdir == 0

                %reads the input image
                [image,map] = imread(append("input",'\',files(i).name));
                if size(image,3) == 1
                    image = uint8(round(ind2rgb(image, map)*255));
                end
                [imgCornersCoords, image_ids] = getCorners(image);
                numArucos = size(imgCornersCoords,1);
                refAruco = zeros(numArucos,1);
                for i = 1:numArucos
%                    refAruco(i) = find(template_ids == image_ids(i));
                end

                %calculates the homography matrix
                H = homography(imgCornersCoords, refCornersCoords(refAruco(:), :, :));
                image=rgb2gray(image);
                image=im2double(image);
                IMG = detectSURFFeatures(image);
                [f2,vpts2] = extractFeatures(image,IMG);
                indexPairs = matchFeatures(f1,f2) ;
                matchedPoints1 = vpts1(indexPairs(:,1));
                matchedPoints2 = vpts2(indexPairs(:,2));
                figure(1);
                showMatchedFeatures(reference,image,matchedPoints1,matchedPoints2);
                [HNEW, SUCC] = RANSAC_Function(indexPairs,  REF ,IMG);
                
                [rgbIM] = frame_homography_teste(H ,ref_h,ref_w,vectorMatrix,image);
                figure(2);
                imshow(rgbIM);
                
                [rgbIM] = frame_homography_teste(HNEW ,ref_h,ref_w,vectorMatrix,image);
                figure(3);
                imshow(rgbIM);
            end
        end
        
        figure(1)
        imshow(reference)
        hold on
        gscatter(REF.Location(indexPairs(:,1),1),REF.Location(indexPairs(:,1),2));
        hold off
        
        figure(2)
        imshow(image)
        hold on
        gscatter(IMG.Location(indexPairs(:,2),1),IMG.Location(indexPairs(:,2),2));
        hold off
        
        
        matchedPoints1 = vpts1(indexPairs(:,1));
        matchedPoints2 = vpts2(indexPairs(:,2));
        showMatchedFeatures(reference,image,matchedPoints1,matchedPoints2);
        
        
        

        
        